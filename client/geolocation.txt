Building a real-time tracking app with React Native, Google Maps, Node.js, and MongoDB involves several steps. Below is a detailed step-by-step guide to help you build this app. The app will allow customers to request a ride, and the nearest driver will be shown on the map.

---

### **Step 1: Set Up the Development Environment**
1. **Install Node.js and npm**: Download and install Node.js from [nodejs.org](https://nodejs.org/).
2. **Install React Native CLI**: Run the following command to install React Native CLI globally.
   ```bash
   npm install -g react-native-cli
   ```
3. **Install MongoDB**: Download and install MongoDB from [mongodb.com](https://www.mongodb.com/).
4. **Install Expo CLI** (optional for React Native development):
   ```bash
   npm install -g expo-cli
   ```

---

### **Step 2: Create the Backend (Node.js + MongoDB)**
1. **Initialize a Node.js project**:
   ```bash
   mkdir ride-tracking-backend
   cd ride-tracking-backend
   npm init -y
   ```
2. **Install required dependencies**:
   ```bash
   npm install express mongoose cors socket.io
   ```
3. **Create the server file** (`server.js`):
   ```javascript
   const express = require('express');
   const mongoose = require('mongoose');
   const cors = require('cors');
   const http = require('http');
   const socketIo = require('socket.io');

   const app = express();
   const server = http.createServer(app);
   const io = socketIo(server, {
     cors: {
       origin: '*',
     },
   });

   // Middleware
   app.use(cors());
   app.use(express.json());

   // MongoDB connection
   mongoose.connect('mongodb://localhost:27017/rideTracking', {
     useNewUrlParser: true,
     useUnifiedTopology: true,
   });

   // Define schemas
   const driverSchema = new mongoose.Schema({
     name: String,
     location: {
       type: { type: String, default: 'Point' },
       coordinates: [Number],
     },
   });

   const rideSchema = new mongoose.Schema({
     customerId: String,
     driverId: String,
     status: String, // e.g., 'requested', 'accepted', 'completed'
   });

   const Driver = mongoose.model('Driver', driverSchema);
   const Ride = mongoose.model('Ride', rideSchema);

   // Socket.io for real-time updates
   io.on('connection', (socket) => {
     console.log('A client connected');

     socket.on('requestRide', async (data) => {
       const { customerId, location } = data;

       // Find the nearest driver
       const nearestDriver = await Driver.findOne({
         location: {
           $near: {
             $geometry: {
               type: 'Point',
               coordinates: location,
             },
           },
         },
       });

       if (nearestDriver) {
         // Create a ride request
         const ride = new Ride({
           customerId,
           driverId: nearestDriver._id,
           status: 'requested',
         });
         await ride.save();

         // Notify the driver
         io.emit('rideRequest', { ride, driver: nearestDriver });
       }
     });

     socket.on('disconnect', () => {
       console.log('A client disconnected');
     });
   });

   // Start the server
   const PORT = 5000;
   server.listen(PORT, () => {
     console.log(`Server running on port ${PORT}`);
   });
   ```

4. **Run the backend server**:
   ```bash
   node server.js
   ```

---

### **Step 3: Create the React Native App**
1. **Initialize a React Native project**:
   ```bash
   npx react-native init RideTrackingApp
   cd RideTrackingApp
   ```
2. **Install required dependencies**:
   ```bash
   npm install @react-native-maps/directions react-native-maps socket.io-client
   ```
3. **Set up Google Maps**:
   - Get an API key from the [Google Cloud Console](https://console.cloud.google.com/).
   - Add the API key to your `AndroidManifest.xml` (for Android) and `AppDelegate.m` (for iOS).

4. **Create the main app component** (`App.js`):
   ```javascript
   import React, { useEffect, useState } from 'react';
   import { View, Text, Button } from 'react-native';
   import MapView, { Marker } from 'react-native-maps';
   import io from 'socket.io-client';

   const socket = io('http://localhost:5000');

   const App = () => {
     const [customerLocation, setCustomerLocation] = useState(null);
     const [driverLocation, setDriverLocation] = useState(null);

     useEffect(() => {
       // Get customer's current location
       navigator.geolocation.getCurrentPosition(
         (position) => {
           const { latitude, longitude } = position.coords;
           setCustomerLocation({ latitude, longitude });
         },
         (error) => console.error(error),
         { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }
       );

       // Listen for ride updates
       socket.on('rideRequest', (data) => {
         setDriverLocation(data.driver.location.coordinates);
       });
     }, []);

     const requestRide = () => {
       if (customerLocation) {
         socket.emit('requestRide', {
           customerId: '123', // Replace with actual customer ID
           location: [customerLocation.longitude, customerLocation.latitude],
         });
       }
     };

     return (
       <View style={{ flex: 1 }}>
         <MapView
           style={{ flex: 1 }}
           initialRegion={{
             latitude: customerLocation?.latitude || 37.78825,
             longitude: customerLocation?.longitude || -122.4324,
             latitudeDelta: 0.0922,
             longitudeDelta: 0.0421,
           }}
         >
           {customerLocation && (
             <Marker coordinate={customerLocation} title="Customer" />
           )}
           {driverLocation && (
             <Marker
               coordinate={{
                 latitude: driverLocation[1],
                 longitude: driverLocation[0],
               }}
               title="Driver"
             />
           )}
         </MapView>
         <Button title="Request Ride" onPress={requestRide} />
       </View>
     );
   };

   export default App;
   ```

---

### **Step 4: Test the App**
1. **Start the React Native app**:
   ```bash
   npx react-native run-android
   # or
   npx react-native run-ios
   ```
2. **Simulate ride requests**:
   - Open the app and request a ride.
   - Check the backend logs to ensure the ride request is processed.

---

### **Step 5: Deploy the App**
1. **Deploy the backend**:
   - Use a cloud service like Heroku, AWS, or DigitalOcean to deploy the Node.js backend.
2. **Deploy the React Native app**:
   - Build the app for Android and iOS using `react-native build-android` or `react-native build-ios`.
   - Publish the app to the Google Play Store or Apple App Store.

---

### **Additional Features to Consider**
- Add authentication (e.g., using JWT).
- Implement payment integration.
- Add real-time tracking of the driver's movement.
- Use a cloud database like MongoDB Atlas for scalability.

This guide provides a basic implementation. You can expand it based on your requirements.